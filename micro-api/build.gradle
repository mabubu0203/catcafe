apply from: "$rootDir/gradle/generate_api.gradle"
apply plugin: "com.google.cloud.tools.jib"
apply plugin: "org.beryx.jlink"

dependencies {

    // SpringBoot Projects
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    runtimeOnly("org.springframework.boot:spring-boot-properties-migrator")

    // openapi generator
    compileOnly("io.swagger:swagger-annotations:${swaggerAnnotationsVersion}")
    compileOnly("io.springfox:springfox-core:3.0.0")
    compileOnly("org.openapitools:jackson-databind-nullable:0.2.1")

    // springdoc-openapi-ui
    implementation("org.springdoc:springdoc-openapi-webflux-ui:${springDocVersion}")
    implementation("org.springdoc:springdoc-openapi-security:${springDocVersion}")

    // lombok
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }

    // mysql
    runtimeOnly("dev.miku:r2dbc-mysql")
    runtimeOnly("mysql:mysql-connector-java")

    developmentOnly("io.projectreactor:reactor-tools")
}

test {
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}

compileJava {
    dependsOn tasks.openApiGenerate
}

sourceSets {
    main {
        java.srcDir "${openApiGenerate.outputDir.get()}/src/main/java"
        resources.srcDir "${openApiGenerate.outputDir.get()}/src/main/resources"
    }
}

jar {
    enabled = true
    archiveBaseName = "micro-api"
    inputs.property("moduleName", "CatCafe.micro.api.main")
    manifest {
        attributes("Main-Class": "mabubu0203.com.github.catcafe.api.ApiApp")
        attributes("Automatic-Module-Name": "CatCafe.micro.api.main")
        from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

bootJar {
    enabled = true
    archiveBaseName = "micro-api"
    archiveVersion = "$catCafeVersion"
    launchScript()
    manifest {
        attributes("Start-Class": "mabubu0203.com.github.catcafe.api.ApiApp")
        attributes("Automatic-Module-Name": "CatCafe.micro.api.main")
    }
}

jlink {
    // https://badass-jlink-plugin.beryx.org/releases/latest/
    mainClass = "mabubu0203.com.github.catcafe.api.ApiApp"
    moduleName = "CatCafe.micro.api.main"
    mergedModuleName = "CatCafe.micro.api.main.merged.module"
    mergedModuleJarName = "micro-api.merged.module"
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    mergedModule {
        version = "$catCafeVersion"
        requires "java.desktop"
        requires "java.logging"
        requires "java.security.jgss"
        requires "java.naming"
        requires "java.base"
        requires "com.fasterxml.jackson.module.paramnames"
        requires "com.fasterxml.jackson.databind"
        uses "ch.qos.logback.classic.spi.Configurator"
    }
    launcher {
        name = "micro-api"
        moduleName = "CatCafe.micro.api.main"
        jvmArgs = [
                "-Dspring.profiles.active=local",
//                "--add-reads", "CatCafe.micro.api.main.merged.module=CatCafe.micro.api.main",
                "-cp", "../app/*"
        ]
    }
    customImage {
        appModules = ["CatCafe.micro.api.main.merged.module"]
    }
}

task bootRunCustomJRE(group: "application", type: Exec, dependsOn: [tasks.bootJar, tasks.jlink]) {
    commandLine(
            "${buildDir}/image/bin/java",
            "-Dspring.profiles.active=local",
            "--add-reads", "CatCafe.micro.api.main.merged.module=CatCafe.micro.api.main",
            "-jar", tasks.bootJar.archiveFile.get().asFile)
//    commandLine("${buildDir}/image/bin/micro-api")
}

jib {
    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
        environment = [JAVA_TOOL_OPTIONS: '-Dfile.encoding=UTF-8 -Dspring.profiles.active=docker']
        jvmFlags = ['-Xms512m', '-Xdebug']
        mainClass = 'mabubu0203.com.github.catcafe.api.ApiApp'
        ports = ['9001']
    }
    from {
        image = "adoptopenjdk/openjdk11:jdk-11.0.10_9-alpine-slim"
    }
    to {
        image = "play-with-jib/micro-api:$catCafeVersion"
    }
}